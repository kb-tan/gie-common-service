/* tslint:disable */
/* eslint-disable */
/**
 * Simple Book API
 * An API to manage book data.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Book,
  NewBook,
} from '../models/index';
import {
    BookFromJSON,
    BookToJSON,
    NewBookFromJSON,
    NewBookToJSON,
} from '../models/index';

export interface AddBookRequest {
    newBook: NewBook;
}

export interface DeleteBookRequest {
    bookId: string;
}

export interface GetBookRequest {
    bookId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Add a new book
     */
    async addBookRaw(requestParameters: AddBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Book>> {
        if (requestParameters['newBook'] == null) {
            throw new runtime.RequiredError(
                'newBook',
                'Required parameter "newBook" was null or undefined when calling addBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/books`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewBookToJSON(requestParameters['newBook']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookFromJSON(jsonValue));
    }

    /**
     * Add a new book
     */
    async addBook(requestParameters: AddBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Book> {
        const response = await this.addBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a book
     */
    async deleteBookRaw(requestParameters: DeleteBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling deleteBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a book
     */
    async deleteBook(requestParameters: DeleteBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookRaw(requestParameters, initOverrides);
    }

    /**
     * Get a book
     */
    async getBookRaw(requestParameters: GetBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Book>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookFromJSON(jsonValue));
    }

    /**
     * Get a book
     */
    async getBook(requestParameters: GetBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Book> {
        const response = await this.getBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all books
     */
    async listBooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Book>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookFromJSON));
    }

    /**
     * List all books
     */
    async listBooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Book>> {
        const response = await this.listBooksRaw(initOverrides);
        return await response.value();
    }

}
