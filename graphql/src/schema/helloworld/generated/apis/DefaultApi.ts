/* tslint:disable */
/* eslint-disable */
/**
 * Hello World API
 * A simple API to manage \'Hello World\' messages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Message,
  MessageInput,
} from '../models/index';
import {
    MessageFromJSON,
    MessageToJSON,
    MessageInputFromJSON,
    MessageInputToJSON,
} from '../models/index';

export interface CreateHelloworldMessageRequest {
    messageInput: MessageInput;
}

export interface DeleteHelloworldMessageRequest {
    messageId: number;
}

export interface GetHelloworldMessageByIdRequest {
    messageId: number;
}

export interface UpdateHelloworldMessageRequest {
    messageId: number;
    messageInput: MessageInput;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create a new greeting message
     */
    async createHelloworldMessageRaw(requestParameters: CreateHelloworldMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['messageInput'] == null) {
            throw new runtime.RequiredError(
                'messageInput',
                'Required parameter "messageInput" was null or undefined when calling createHelloworldMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/helloworld`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageInputToJSON(requestParameters['messageInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Create a new greeting message
     */
    async createHelloworldMessage(requestParameters: CreateHelloworldMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.createHelloworldMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a greeting message
     */
    async deleteHelloworldMessageRaw(requestParameters: DeleteHelloworldMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling deleteHelloworldMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/helloworld/{messageId}`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a greeting message
     */
    async deleteHelloworldMessage(requestParameters: DeleteHelloworldMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteHelloworldMessageRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a greeting message by ID
     */
    async getHelloworldMessageByIdRaw(requestParameters: GetHelloworldMessageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling getHelloworldMessageById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/helloworld/{messageId}`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Retrieve a greeting message by ID
     */
    async getHelloworldMessageById(requestParameters: GetHelloworldMessageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.getHelloworldMessageByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all greeting messages
     */
    async listHelloworldMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Message>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/helloworld`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageFromJSON));
    }

    /**
     * List all greeting messages
     */
    async listHelloworldMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Message>> {
        const response = await this.listHelloworldMessagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a greeting message
     */
    async updateHelloworldMessageRaw(requestParameters: UpdateHelloworldMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling updateHelloworldMessage().'
            );
        }

        if (requestParameters['messageInput'] == null) {
            throw new runtime.RequiredError(
                'messageInput',
                'Required parameter "messageInput" was null or undefined when calling updateHelloworldMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/helloworld/{messageId}`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MessageInputToJSON(requestParameters['messageInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Update a greeting message
     */
    async updateHelloworldMessage(requestParameters: UpdateHelloworldMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.updateHelloworldMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
